# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rQspEEQg1wGHBjobhXmAnkBzNwnxWbdZ
"""

from IPython.display import display, HTML, clear_output
import ipywidgets as widgets
import time

# List of questions to loop through indefinitely
questions = [
    "Are you sure?",
    "Are you really sure?",  # Replaced "Think again?" with this
    "Really?",
    "For real?",
    "You sure about that?",
    "Are you absolutely certain?",
    "Is that your final answer?",
    "No turning back, are you sure?",
    "ðŸ˜­ Are you absolutely positive? ðŸ˜­",  # Added sad emoji with tears
    "ðŸ˜­ Are you really, really sure? ðŸ˜­",  # Added sad emoji with tears
    "ðŸ˜­ Don't make me beg... Are you sure? ðŸ˜­",  # Added sad emoji with tears
    "ðŸ˜­ This is the last chance, please reconsider! ðŸ˜­",  # Added sad emoji with tears
    "ðŸ˜­ Is this your final decision? ðŸ˜­"  # Added sad emoji with tears
]

# Function to display the main question with options
def show_main_question():
    clear_output(wait=True)
    display(HTML("<h2 class='main-question'>Whoâ€™s mommyâ€™s good boy?</h2>"))
    display(widgets.HBox([button_yes, button_ew]))  # Show the main question options again

# Function to ask the next question in the loop
def ask_next_question(change=None):
    global question_index  # Ensure we track the question index

    if question_index < len(questions):  # Continue if there are more questions
        question = questions[question_index]
        clear_output(wait=True)  # Clear the previous output
        display(HTML(f"<h2 class='question'>{question}</h2>"))
        display(widgets.HBox([button_yes_sure, button_no_sure]))  # Show Yes and No buttons
        button_animation(button_yes_sure)  # Add animation to the Yes button
        question_index += 1  # Move to the next question
    else:
        question_index = 0  # Reset the index to start the questions over
        ask_next_question()  # Continue the loop from the beginning

# Function to show the heart when the "Mee Mee Mee!!" button is clicked
def show_heart(change=None):
    clear_output(wait=True)
    display(HTML("<h1 class='heart'>ðŸ’• Yes, you are! ðŸ’•</h1>"))
    display(widgets.HBox([button_yes, button_ew]))  # Show the main question options again

# Function to exit the question loop and go back to the main question
def exit_question_loop(change=None):
    show_main_question()  # Return to the main question when No is clicked

# Button for the main question
button_yes = widgets.Button(description="Mee mee meee!!", button_style="success")
button_yes.style.button_color = "#ff69b4"  # Pink
button_yes.style.font_size = '18px'
button_yes.style.font_weight = 'bold'
button_yes.style.border_radius = '15px'
button_yes.on_click(show_heart)

button_ew = widgets.Button(description="Ew wtf", button_style="danger")
button_ew.style.button_color = "#ff69b4"  # Pink
button_ew.style.font_size = '18px'
button_ew.style.font_weight = 'bold'
button_ew.style.border_radius = '15px'
button_ew.on_click(ask_next_question)  # Start the loop of questions

# Button for "No" in the loop (to stop the loop)
button_no_sure = widgets.Button(description="No", button_style="success")
button_no_sure.style.button_color = "#ff69b4"  # Pink
button_no_sure.style.font_size = '18px'
button_no_sure.style.font_weight = 'bold'
button_no_sure.style.border_radius = '15px'
button_no_sure.on_click(exit_question_loop)

# Button for "Yes" in the loop (to keep going to the next question)
button_yes_sure = widgets.Button(description="Yes", button_style="danger")
button_yes_sure.style.button_color = "#ff69b4"  # Pink
button_yes_sure.style.font_size = '18px'
button_yes_sure.style.font_weight = 'bold'
button_yes_sure.style.border_radius = '15px'
button_yes_sure.on_click(ask_next_question)

# Track the current question index
question_index = 0

# Function to add a cute animation to the button (pop effect)
def button_animation(button):
    button.layout.transform = 'scale(1.2)'  # Pop effect (scale up)

    # Apply a sparkle effect by changing button's border and color
    button.style.border = '5px solid #fff'  # Sparkly border
    button.style.box_shadow = '0 0 10px 5px rgba(255, 105, 180, 0.8)'  # Sparkly shadow

    # After the animation completes, reset to normal size
    time.sleep(0.3)
    button.layout.transform = 'scale(1)'
    button.style.border = 'none'
    button.style.box_shadow = 'none'

# Display the sparkle effect in CSS
display(HTML("""
    <style>
        body {
            background-color: #ffe6f2; /* Soft pink background */
            font-family: 'Arial', sans-serif;
            text-align: center;
        }
        h2, h1 {
            color: #ff69b4;
            font-family: 'Pacifico', cursive;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);
        }
        .question {
            color: #ff69b4;
            font-family: 'Pacifico', cursive;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);
        }
        .main-question {
            color: #ff69b4;
            font-family: 'Pacifico', cursive;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);
            margin-top: 50px;
        }
        .heart {
            color: #ff69b4;
            font-family: 'Pacifico', cursive;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);
        }
        button {
            font-size: 18px;
            font-weight: bold;
            background-color: #ff69b4;
            border-radius: 15px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
            border: none;
            padding: 10px 20px;
            transition: all 0.3s ease;
            position: relative;
        }
        button:hover {
            background-color: #ff1493;
            cursor: pointer;
        }
        button:active {
            transform: scale(1.2);
        }
    </style>
"""))

# Display the main question
show_main_question()